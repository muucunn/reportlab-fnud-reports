#Autogenerated by ReportLab guiedit do not edit
import reportlab
from reportlab.lib.colors import red, blue, white, darkblue, aquamarine, cadetblue, cyan, darkcyan, deepskyblue, mediumslateblue, midnightblue, navy, royalblue, fidlightblue, teal, grey, toColor, Color
from reportlab.graphics.charts.legends import Legend
from reportlab.graphics.shapes import Drawing, _DrawingEditorMixin, Rect
from reportlab.lib.formatters import DecimalFormatter
from reportlab.graphics.charts.barcharts import HorizontalBarChart
from reportlab.graphics.charts.textlabels import RedNegativeChanger

class PortfolioBar(_DrawingEditorMixin,Drawing):
    def __init__(self,width=400,height=200,*args,**kw):
        Drawing.__init__(self,width,height,*args,**kw)
        self.renderScale = 1.0
        self._add(self,reportlab.graphics.charts.barcharts.HorizontalBarChart(),name='chart',validate=None,desc=None)
        self.width       = 293
        self.chart.valueAxis.gridStart               = None
        self.chart.valueAxis.maximumTicks            = 10
        self.vAlign='TOP'
        self.chart.bars[2].strokeColor     = red
        self.chart.bars[0].strokeColor  = self.chart.bars[0].fillColor= toColor(0x1F497D)
        self.chart.bars[1].fillColor   = white.clone(alpha=0)
        self.chart.x               = 6
        self.chart.categoryAxis.style='parallel_3d'
        self.chart.data             = [(-900000, -1000000, -1100000, -120000, -800000, -80000, -90000, -705000, -100000, -20000, -805000, -1100000), (1100000, 80000, 125000, 1100000, 115000, 90000, 1100000, 70000, 1080000, 30000, 55000, 99000), (40000, -60000, 80000, -30000, 60000, 75000, -80000, 40000, -30000, -20000, 1500000, 58000)]
        self.chart.valueAxis.joinAxisMode='top'
        self.chart.valueAxis.tickUp                  = 4
        self.chart.valueAxis.tickDown                = 0
        self.chart.valueAxis.labels.dy               = 5
        self.chart.valueAxis.labels.angle            = 90
        self.chart.valueAxis.labels.boxAnchor='w'
        self.chart.valueAxis.labels.dx               = -2
        self.chart.valueAxis.labelTextFormat         = DecimalFormatter(places=0)
        self.chart.valueAxis.labelTextFormat.comma  = ','
        rowHeight = 12
        chartPad = 42
        n = len(self.chart.data[0])
        self.chart.height = rowHeight*n
        self.chart.y = self.chart.categoryAxis.strokeWidth
        self.chart.width            = self.width-2*self.chart.x
        self.chart.bars[2].fillColor = white.clone(alpha=0)
        self.chart.bars[1].strokeColor=grey
        self.chart.bars[2].strokeWidth=1.25
        self.chart.valueAxis.labels.customDrawChanger=RedNegativeChanger()
        self._add(self,Legend(),name='legend',validate=None,desc=None)
        self.height = 210
        self.legend.alignment        = 'right'
        self.legend.boxAnchor='nw'
        self.legend.fontSize         = 8
        self.legend.dxTextSpace      = 2
        self.legend.dx               = 7
        self.legend.dy               = 7
        self.legend.strokeWidth      = 0.5
        self.legend.colorNamePairs   = [(Rect(0,0,0,0,strokeColor=toColor(0x1f497d),fillColor=toColor(0x1f497d),strokeWidth=0.5), 'Profit / Loss'), (Color(1,1,1,0), 'Limit'), (Rect(0,0,0,0,strokeColor=toColor('red'),fillColor=None,strokeWidth=0.5), 'Stop Loss')]
        self.legend.x                = 20
        self.legend.columnMaximum    = 3
        self.legend.y                = 40
        self.legend.deltay           = 12
        self.legend.deltax         = 1
        self.legend.variColumn       = 1
        self.legend.autoXPadding     = 0
        #self._add(self,Rect(0,0,0,0,strokeColor=toColor('green'),strokeWidth=1,fillColor=None),name='r',validate=None,desc=None)

    def getContents(self):
        #self.background  = Rect(0,0,self.width,self.height,strokeColor=red,fillColor=None,strokleWidth=1)
        chart = self.chart
        vA = chart.valueAxis
        legend = self.legend
        pad = 3
        legendHeight = self.legend.getBounds()
        legendWidth = abs(legendHeight[2]-legendHeight[0])+pad
        legendHeight=abs(legendHeight[3]-legendHeight[1])+pad
        maxS, maxP = chart._computeMaxSpace(legendHeight,legendWidth)
        needed = legendWidth - maxS
        again = needed>0
        if again: maxS, maxP = chart._computeMaxSpace(legendHeight,legendWidth)
        if again: needed = legendWidth - maxS
        if again: again = needed>0
        if again: vA.avoidBoundSpace = (0,needed+pad) if maxP[4] else (needed+pad,0)
        if again: maxS, maxP = chart._computeMaxSpace(legendHeight,legendWidth)
        legend.boxAnchor = 'e' if maxP[4] else 'w'
        legend.x = maxP[2] if maxP[4] else maxP[0]
        legend.y = 0.5*(maxP[1]+maxP[3])-3
        return Drawing.getContents(self)

if __name__=="__main__": #NORUNTESTS
    PortfolioBar().save(formats=['pdf'],outDir='.',fnRoot=None)
